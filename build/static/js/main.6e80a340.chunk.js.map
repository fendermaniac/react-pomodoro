{"version":3,"sources":["components/Timer.js","components/TimeConfig.js","components/App.js","serviceWorker.js","index.js"],"names":["Timer","_ref","labelID","label","timeID","timeLeft","startStopID","toggleTimer","startStop","resetID","reset","react_default","a","createElement","className","id","onClick","src","TimeConfig","lengthID","length","decrementID","updatePomodoro","incrementID","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","break","session","timer","sessionLabel","sessionActive","isPaused","bind","assertThisInitialized","resetPomodoro","setState","beep","document","getElementById","currentTime","play","clearInterval","countdown","e","target","pause","_this2","setInterval","role","aria-label","components_Timer","concat","Math","floor","components_TimeConfig","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6e80a340.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Timer = (\r\n  { \r\n    labelID, \r\n    label,  \r\n    timeID, \r\n    timeLeft, \r\n    startStopID, \r\n    toggleTimer, \r\n    startStop,\r\n    resetID, \r\n    reset\r\n  }\r\n  ) => {\r\n  return ( \r\n    <div className=\"timer\">\r\n    <h2 id={labelID}>{label}</h2>\r\n    <div id={timeID} className=\"countdown\">\r\n      {timeLeft}\r\n    </div>\r\n    <button\r\n      className=\"btn\"\r\n      id={startStopID}\r\n      onClick={toggleTimer}\r\n    >\r\n      {startStop}\r\n    </button>\r\n    <button className=\"btn\" id={resetID} onClick={reset}>\r\n      Reset\r\n    </button>\r\n    <audio\r\n      id=\"beep\"\r\n      src=\"https://archive.org/download/carlosnochi_yahoo_Beep/beep.mp3\"\r\n    />\r\n  </div>\r\n   );\r\n}\r\n \r\nexport default Timer;","import React from 'react';\r\n\r\nconst TimeConfig = ( \r\n  { \r\n    labelID, \r\n    label, \r\n    lengthID, \r\n    length, \r\n    decrementID, \r\n    updatePomodoro, \r\n    incrementID\r\n  }) => {\r\n  return (     \r\n  <div className=\"time-config\">\r\n    <h2 id={labelID}>{label}</h2>\r\n    <div className=\"pomodoro-length\" id={lengthID}>{length}</div>\r\n    <button\r\n      className=\"btn\"\r\n      id={decrementID}\r\n      onClick={updatePomodoro}\r\n    >\r\n      -\r\n    </button>\r\n    <button\r\n      className=\"btn\"\r\n      id={incrementID}\r\n      onClick={updatePomodoro}\r\n    >\r\n      +\r\n    </button>\r\n  </div> );\r\n}\r\n \r\nexport default TimeConfig;","/* eslint-disable react/jsx-filename-extension */\nimport React, { Component } from 'react';\nimport Timer from './Timer';\nimport TimeConfig from './TimeConfig';\nimport '../App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      break: 5,\n      session: 25,\n      timer: 1500,\n      sessionLabel: 'Start Session',\n      sessionActive: false,\n      isPaused: false,\n      startStop: 'Start',\n    };\n    this.updatePomodoro = this.updatePomodoro.bind(this);\n    this.resetPomodoro = this.resetPomodoro.bind(this);\n    this.toggleTimer = this.toggleTimer.bind(this);\n  }\n\n  componentDidUpdate() {\n    if (this.state.timer < 0 && this.state.sessionLabel === 'Session') {\n      this.setState({\n        timer: this.state.break * 60,\n        sessionLabel: 'Break',\n      });\n      const beep = document.getElementById('beep');\n      beep.currentTime = 0;\n      beep.play();\n    } else if (this.state.timer < 0 && this.state.sessionLabel === 'Break') {\n      clearInterval(this.countdown);\n      this.setState({\n        break: 5,\n        session: 25,\n        timer: 1500,\n        sessionLabel: 'Start Session',\n        sessionActive: false,\n        isPaused: false,\n        startStop: 'Start',\n      });\n      const beep = document.getElementById('beep');\n      beep.currentTime = 0;\n      beep.play();\n    }\n  }\n\n  updatePomodoro(e) {\n    switch (e.target.id) {\n      case 'break-decrement':\n        if (this.state.break > 1) {\n          this.setState({\n            break: this.state.break - 1,\n          });\n        }\n        break;\n      case 'break-increment':\n        if (this.state.break < 60) {\n          this.setState({\n            break: this.state.break + 1,\n          });\n        }\n        break;\n      case 'session-decrement':\n        if (this.state.session > 1) {\n          this.setState({\n            session: this.state.session - 1,\n            timer: this.state.session * 60,\n          });\n        }\n        break;\n      case 'session-increment':\n        if (this.state.session < 60) {\n          this.setState({\n            session: this.state.session + 1,\n            timer: this.state.session * 60,\n          });\n        }\n        break;\n      default:\n        \n    }\n  }\n\n  resetPomodoro() {\n    if (this.state.sessionActive) {\n      clearInterval(this.countdown);\n    }\n\n    this.setState({\n      break: 5,\n      session: 25,\n      timer: 1500,\n      sessionLabel: 'Start Session',\n      sessionActive: false,\n      isPaused: false,\n      startStop: 'Start',\n    });\n    const beep = document.getElementById('beep');\n    beep.pause();\n    beep.currentTime = 0;\n  }\n\n  toggleTimer(e) {\n    if (!this.state.sessionActive) {\n      this.countdown = setInterval(() => {\n        this.setState({\n          timer: this.state.timer - 1,\n        });\n      }, 1000);\n      this.setState({\n        sessionActive: true,\n        sessionLabel: 'Session',\n        startStop: 'Pause',\n        isPaused: false,\n      });\n    } else if (!this.state.isPaused) {\n      clearInterval(this.countdown);\n      this.setState({ isPaused: true, startStop: 'Play' });\n    } else if (this.state.isPaused) {\n      this.countdown = setInterval(() => {\n        this.setState({\n          timer: this.state.timer - 1,\n        });\n      }, 1000);\n      this.setState({ isPaused: false, startStop: 'Pause' });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>\n          <span role=\"img\" aria-label=\"pomodoro-emoji\">\n            🍅\n          </span>\n          Pomodoro\n          <span role=\"img\" aria-label=\"pomodoro-emoji\">\n            🍅\n          </span>\n        </h1>\n        <Timer\n          className=\"timer\"\n          label={this.state.sessionLabel}\n          timeLeft={`${\n            Math.floor(this.state.timer / 60) < 10 ? '0' : ''\n          }${Math.floor(this.state.timer / 60)}:${\n            this.state.timer % 60 < 10 ? '0' : ''\n          }${this.state.timer % 60}`}\n          startStop={this.state.startStop}\n          reset={this.resetPomodoro}\n          toggleTimer={this.toggleTimer}\n          labelID=\"timer-label\"\n          timeID=\"time-left\"\n          startStopID=\"start_stop\"\n          resetID=\"reset\"\n        />\n        <TimeConfig\n          className=\"time-config\"\n          label=\"Break Length\"\n          length={this.state.break}\n          labelID=\"break-label\"\n          lengthID=\"break-length\"\n          decrementID=\"break-decrement\"\n          incrementID=\"break-increment\"\n          updatePomodoro={this.updatePomodoro}\n        />\n        <TimeConfig\n          className=\"time-config\"\n          label=\"Session Length\"\n          length={this.state.session}\n          labelID=\"session-label\"\n          lengthID=\"session-length\"\n          decrementID=\"session-decrement\"\n          incrementID=\"session-increment\"\n          updatePomodoro={this.updatePomodoro}\n        />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}