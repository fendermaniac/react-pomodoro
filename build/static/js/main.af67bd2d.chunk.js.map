{"version":3,"sources":["components/Timer.js","components/TimeConfig.js","components/App.js","serviceWorker.js","index.js"],"names":["Timer","_ref","labelID","label","timeID","timeLeft","startStopID","toggleTimer","startStop","resetID","reset","react_default","a","createElement","className","id","onClick","src","TimeConfig","lengthID","length","decrementID","updatePomodoro","incrementID","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","break","session","timer","sessionLabel","sessionActive","isPaused","bind","assertThisInitialized","resetPomodoro","setState","beep","document","getElementById","currentTime","play","clearInterval","countdown","e","_this2","target","pause","_this3","setInterval","role","aria-label","components_Timer","concat","Math","floor","components_TimeConfig","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.af67bd2d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Timer = (\r\n  { \r\n    labelID, \r\n    label,  \r\n    timeID, \r\n    timeLeft, \r\n    startStopID, \r\n    toggleTimer, \r\n    startStop,\r\n    resetID, \r\n    reset\r\n  }\r\n  ) => {\r\n  return ( \r\n    <div className=\"timer\">\r\n    <h2 id={labelID}>{label}</h2>\r\n    <div id={timeID} className=\"countdown\">\r\n      {timeLeft}\r\n    </div>\r\n    <button\r\n      className=\"btn\"\r\n      id={startStopID}\r\n      onClick={toggleTimer}\r\n    >\r\n      {startStop}\r\n    </button>\r\n    <button className=\"btn\" id={resetID} onClick={reset}>\r\n      Reset\r\n    </button>\r\n    <audio\r\n      id=\"beep\"\r\n      src=\"https://archive.org/download/carlosnochi_yahoo_Beep/beep.mp3\"\r\n    />\r\n  </div>\r\n   );\r\n}\r\n \r\nexport default Timer;","import React from 'react';\r\n\r\nconst TimeConfig = ( \r\n  { \r\n    labelID, \r\n    label, \r\n    lengthID, \r\n    length, \r\n    decrementID, \r\n    updatePomodoro, \r\n    incrementID\r\n  }) => {\r\n  return (     \r\n  <div className=\"time-config\">\r\n    <h2 id={labelID}>{label}</h2>\r\n    <div className=\"pomodoro-length\" id={lengthID}>{length}</div>\r\n    <button\r\n      className=\"btn\"\r\n      id={decrementID}\r\n      onClick={updatePomodoro}\r\n    >\r\n      -\r\n    </button>\r\n    <button\r\n      className=\"btn\"\r\n      id={incrementID}\r\n      onClick={updatePomodoro}\r\n    >\r\n      +\r\n    </button>\r\n  </div> );\r\n}\r\n \r\nexport default TimeConfig;","/* eslint-disable react/jsx-filename-extension */\r\nimport React, { Component } from 'react';\r\nimport Timer from './Timer';\r\nimport TimeConfig from './TimeConfig';\r\nimport '../App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      break: 5,\r\n      session: 25,\r\n      timer: 1500,\r\n      sessionLabel: 'Start Session',\r\n      sessionActive: false,\r\n      isPaused: false,\r\n      startStop: 'Start',\r\n    };\r\n    this.updatePomodoro = this.updatePomodoro.bind(this);\r\n    this.resetPomodoro = this.resetPomodoro.bind(this);\r\n    this.toggleTimer = this.toggleTimer.bind(this);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.state.timer < 0 && this.state.sessionLabel === 'Session') {\r\n      this.setState({\r\n        timer: this.state.break * 60,\r\n        sessionLabel: 'Break',\r\n      });\r\n      const beep = document.getElementById('beep');\r\n      beep.currentTime = 0;\r\n      beep.play();\r\n    } else if (this.state.timer < 0 && this.state.sessionLabel === 'Break') {\r\n      clearInterval(this.countdown);\r\n      this.setState({\r\n        break: 5,\r\n        session: 25,\r\n        timer: 1500,\r\n        sessionLabel: 'Start Session',\r\n        sessionActive: false,\r\n        isPaused: false,\r\n        startStop: 'Start',\r\n      });\r\n      const beep = document.getElementById('beep');\r\n      beep.currentTime = 0;\r\n      beep.play();\r\n    }\r\n  }\r\n\r\n  updatePomodoro(e) {\r\n    switch (e.target.id) {\r\n      case 'break-decrement':\r\n        if (this.state.break > 1) {\r\n          this.setState({\r\n            break: this.state.break - 1,\r\n          });\r\n        }\r\n        break;\r\n      case 'break-increment':\r\n        if (this.state.break < 60) {\r\n          this.setState({\r\n            break: this.state.break + 1,\r\n          });\r\n        }\r\n        break;\r\n      case 'session-decrement':\r\n        if (this.state.session > 1) {\r\n          this.setState({\r\n            session: this.state.session - 1,\r\n          }, () => {\r\n            this.setState({\r\n              timer: this.state.session * 60\r\n            })\r\n          });\r\n        }\r\n        break;\r\n      case 'session-increment':\r\n        if (this.state.session < 60) {\r\n          this.setState({\r\n            session: this.state.session + 1,\r\n          }, () => {\r\n            this.setState({\r\n              timer: this.state.session * 60\r\n            })\r\n          });\r\n        }\r\n        break;\r\n      default:\r\n        \r\n    }\r\n  }\r\n\r\n  resetPomodoro() {\r\n    if (this.state.sessionActive) {\r\n      clearInterval(this.countdown);\r\n    }\r\n\r\n    this.setState({\r\n      break: 5,\r\n      session: 25,\r\n      timer: 1500,\r\n      sessionLabel: 'Start Session',\r\n      sessionActive: false,\r\n      isPaused: false,\r\n      startStop: 'Start',\r\n    });\r\n    const beep = document.getElementById('beep');\r\n    beep.pause();\r\n    beep.currentTime = 0;\r\n  }\r\n\r\n  toggleTimer(e) {\r\n    if (!this.state.sessionActive) {\r\n      this.countdown = setInterval(() => {\r\n        this.setState({\r\n          timer: this.state.timer - 1,\r\n        });\r\n      }, 1000);\r\n      this.setState({\r\n        sessionActive: true,\r\n        sessionLabel: 'Session',\r\n        startStop: 'Pause',\r\n        isPaused: false,\r\n      });\r\n    } else if (!this.state.isPaused) {\r\n      clearInterval(this.countdown);\r\n      this.setState({ isPaused: true, startStop: 'Play' });\r\n    } else if (this.state.isPaused) {\r\n      this.countdown = setInterval(() => {\r\n        this.setState({\r\n          timer: this.state.timer - 1,\r\n        });\r\n      }, 1000);\r\n      this.setState({ isPaused: false, startStop: 'Pause' });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>\r\n          <span role=\"img\" aria-label=\"pomodoro-emoji\">\r\n            🍅\r\n          </span>\r\n          Pomodoro\r\n          <span role=\"img\" aria-label=\"pomodoro-emoji\">\r\n            🍅\r\n          </span>\r\n        </h1>\r\n        <Timer\r\n          label={this.state.sessionLabel}\r\n          timeLeft={`${\r\n            Math.floor(this.state.timer / 60) < 10 ? '0' : ''\r\n          }${Math.floor(this.state.timer / 60)}:${\r\n            this.state.timer % 60 < 10 ? '0' : ''\r\n          }${this.state.timer % 60}`}\r\n          startStop={this.state.startStop}\r\n          reset={this.resetPomodoro}\r\n          toggleTimer={this.toggleTimer}\r\n          labelID=\"timer-label\"\r\n          timeID=\"time-left\"\r\n          startStopID=\"start_stop\"\r\n          resetID=\"reset\"\r\n        />\r\n        <TimeConfig\r\n          className=\"time-config\"\r\n          label=\"Break Length\"\r\n          length={this.state.break}\r\n          labelID=\"break-label\"\r\n          lengthID=\"break-length\"\r\n          decrementID=\"break-decrement\"\r\n          incrementID=\"break-increment\"\r\n          updatePomodoro={this.updatePomodoro}\r\n        />\r\n        <TimeConfig\r\n          className=\"time-config\"\r\n          label=\"Session Length\"\r\n          length={this.state.session}\r\n          labelID=\"session-label\"\r\n          lengthID=\"session-length\"\r\n          decrementID=\"session-decrement\"\r\n          incrementID=\"session-increment\"\r\n          updatePomodoro={this.updatePomodoro}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}